version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - AI_SERVICE_URL=http://ai-service:8000
      - DATA_SERVICE_URL=http://data-service:8001
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_SERVICE_ACCOUNT_KEY=${FIREBASE_SERVICE_ACCOUNT_KEY}
    depends_on:
      - ai-service
      - redis
    networks:
      - adaptilearn-network
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    restart: unless-stopped

  # AI Service (FastAPI)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_SERVICE_ACCOUNT_KEY=${FIREBASE_SERVICE_ACCOUNT_KEY}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - adaptilearn-network
    volumes:
      - ./ai-service:/app
      - ai-models:/app/models
    restart: unless-stopped

  # Data Service (Node.js)
  data-service:
    build:
      context: ./data-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=development
      - PORT=8001
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_SERVICE_ACCOUNT_KEY=${FIREBASE_SERVICE_ACCOUNT_KEY}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - adaptilearn-network
    volumes:
      - ./data-service:/app
      - /app/node_modules
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - adaptilearn-network
    restart: unless-stopped

  # Nginx (optional - for production load balancing)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - adaptilearn-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - adaptilearn-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualizations (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - adaptilearn-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  adaptilearn-network:
    driver: bridge

volumes:
  redis-data:
  ai-models:
  prometheus-data:
  grafana-data:
